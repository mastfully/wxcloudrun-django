# Generated by Django 3.2.8 on 2023-06-29 09:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('camp', '0002_auto_20230626_1017'),
    ]

    operations = [
        migrations.CreateModel(
            name='CCampTbName',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tb_name', models.CharField(max_length=20)),
                ('c_name', models.CharField(max_length=20)),
                ('current', models.BooleanField()),
            ],
            options={
                'db_table': 'ccamp_tb_name',
            },
        ),
        migrations.CreateModel(
            name='JCampTbName',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tb_name', models.CharField(max_length=20)),
                ('c_name', models.CharField(max_length=20)),
                ('current', models.BooleanField()),
            ],
            options={
                'db_table': 'jcamp_tb_name',
            },
        ),
        migrations.CreateModel(
            name='Title',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=10)),
                ('vacation', models.CharField(max_length=10)),
            ],
            options={
                'db_table': 'title',
            },
        ),
        migrations.CreateModel(
            name='BaseSignUpListModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.IntegerField(verbose_name='第几期')),
                ('gender', models.CharField(max_length=10, verbose_name='性别')),
                ('name', models.CharField(max_length=20, verbose_name='姓名')),
                ('age', models.CharField(max_length=10, verbose_name='年龄')),
                ('emergency', models.CharField(max_length=20, verbose_name='紧急联系人')),
                ('grade', models.CharField(max_length=10, verbose_name='年级')),
                ('height', models.CharField(max_length=10, verbose_name='身高')),
                ('phone', models.CharField(max_length=11)),
                ('id_card', models.CharField(max_length=20, verbose_name='身份证')),
                ('race', models.CharField(max_length=10, verbose_name='民族')),
                ('school', models.CharField(max_length=20, verbose_name='学校')),
                ('bad', models.CharField(blank=True, max_length=20, null=True, verbose_name='擅长科目')),
                ('bad_reasonal', models.TextField(blank=True, null=True, verbose_name='不擅长原因')),
                ('biology_full', models.CharField(blank=True, max_length=10, null=True, verbose_name='生物满分')),
                ('biology_ideal_score', models.CharField(blank=True, max_length=10, null=True, verbose_name='生物理想满分')),
                ('biology_near_score', models.CharField(blank=True, max_length=10, null=True, verbose_name='生物最近满分')),
                ('chemistry_full', models.CharField(blank=True, max_length=10, null=True, verbose_name='化学满分')),
                ('chemistry_ideal_score', models.CharField(blank=True, max_length=10, null=True, verbose_name='化学理想满分')),
                ('chemistry_near_score', models.CharField(blank=True, max_length=10, null=True, verbose_name='化学最近满分')),
                ('chinese_full', models.CharField(blank=True, max_length=10, null=True, verbose_name='语文满分')),
                ('chinese_near_score', models.CharField(blank=True, max_length=10, null=True, verbose_name='语文理想满分')),
                ('chinses_ideal_score', models.CharField(blank=True, max_length=10, null=True, verbose_name='语文最近满分')),
                ('defect', models.TextField(blank=True, null=True, verbose_name='自身缺陷')),
                ('dream', models.TextField(blank=True, null=True, verbose_name='理想目标')),
                ('education_investment', models.CharField(blank=True, max_length=20, null=True)),
                ('english_full', models.CharField(blank=True, max_length=10, null=True, verbose_name='英语满分')),
                ('english_ideal_score', models.CharField(blank=True, max_length=10, null=True, verbose_name='英语理想满分')),
                ('english_near_score', models.CharField(blank=True, max_length=10, null=True, verbose_name='英语最近满分')),
                ('father_educational_background', models.CharField(blank=True, max_length=10, null=True)),
                ('father_occupation', models.CharField(blank=True, max_length=10, null=True, verbose_name='父亲职业')),
                ('geography_full', models.CharField(blank=True, max_length=10, null=True, verbose_name='地理满分')),
                ('geography_ideal_score', models.CharField(blank=True, max_length=10, null=True, verbose_name='地理理想满分')),
                ('geography_near_score', models.CharField(blank=True, max_length=10, null=True, verbose_name='地理最近分数')),
                ('good', models.CharField(blank=True, max_length=10, null=True, verbose_name='擅长科目')),
                ('good_reasonal', models.TextField(blank=True, null=True, verbose_name='擅长原因')),
                ('history_full', models.CharField(blank=True, max_length=10, null=True, verbose_name='历史满分')),
                ('history_ideal_score', models.CharField(blank=True, max_length=10, null=True, verbose_name='历史理想分数')),
                ('history_near_score', models.CharField(blank=True, max_length=10, null=True, verbose_name='历史最近分数')),
                ('household_income', models.CharField(blank=True, max_length=10, null=True, verbose_name='家庭收入')),
                ('ideal_heigh_school', models.CharField(blank=True, max_length=20, null=True, verbose_name='理想高中')),
                ('ideal_university', models.CharField(blank=True, max_length=20, null=True, verbose_name='理想大学')),
                ('interst', models.TextField(blank=True, null=True, verbose_name='兴趣爱好')),
                ('investment_in_children_education', models.CharField(blank=True, max_length=20, null=True, verbose_name='教育投资')),
                ('math_full', models.CharField(blank=True, max_length=10, null=True, verbose_name='数学满分')),
                ('math_ideal_score', models.CharField(blank=True, max_length=10, null=True, verbose_name='数学理想分数')),
                ('math_near_score', models.CharField(blank=True, max_length=10, null=True, verbose_name='数学最近分数')),
                ('methods_and_techniques', models.TextField(blank=True, null=True, verbose_name='方法技巧')),
                ('mother_educational_background', models.CharField(blank=True, max_length=10, null=True, verbose_name='母亲学历')),
                ('mother_occupation', models.CharField(blank=True, max_length=10, null=True, verbose_name='母亲职业')),
                ('personal_need', models.TextField(blank=True, null=True)),
                ('physics_full', models.CharField(blank=True, max_length=10, null=True, verbose_name='物理满分')),
                ('physics_ideal_score', models.CharField(blank=True, max_length=10, null=True, verbose_name='物理理想分数')),
                ('physics_near_score', models.CharField(blank=True, max_length=10, null=True, verbose_name='物理最近分数')),
                ('politics_full', models.CharField(blank=True, max_length=10, null=True, verbose_name='政治满分')),
                ('politics_ideal_score', models.CharField(blank=True, max_length=10, null=True, verbose_name='政治理想分数')),
                ('politics_near_score', models.CharField(blank=True, max_length=10, null=True, verbose_name='政治最近分数')),
                ('speciality', models.CharField(blank=True, max_length=20, null=True, verbose_name='特长')),
                ('study_pro', models.CharField(blank=True, max_length=20, null=True, verbose_name='')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
